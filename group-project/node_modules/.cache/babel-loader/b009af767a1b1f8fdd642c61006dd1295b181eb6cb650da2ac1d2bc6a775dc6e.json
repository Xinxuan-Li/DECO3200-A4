{"ast":null,"code":"var _jsxFileName = \"/Users/hong-gabin/Desktop/DECO3200_A4/DECO3200-A4/group-project/src/App.js\",\n  _s = $RefreshSig$();\nimport Navbar from \"./components/Navbar\";\nimport LandingPage from \"./components/LandingPage\";\nimport MapPage from \"./components/MapPage\";\nimport CountryPage from \"./components/CountryPage\";\nimport EventPage from \"./components/EventPage\";\nimport china from \"./contents/countries/china.json\";\nimport france from \"./contents/countries/france.json\";\nimport india from \"./contents/countries/india.json\";\nimport italy from \"./contents/countries/italy.json\";\nimport japan from \"./contents/countries/japan.json\";\nimport lebanon from \"./contents/countries/lebanon.json\";\nimport malaysia from \"./contents/countries/malaysia.json\";\nimport mexico from \"./contents/countries/mexico.json\";\nimport russia from \"./contents/countries/russia.json\";\nimport south_korea from \"./contents/countries/south_korea.json\";\nimport thailand from \"./contents/countries/thailand.json\";\nimport turkey from \"./contents/countries/turkey.json\";\nimport vietnam from \"./contents/countries/vietnam.json\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const countryList = [china, france, india, italy, japan, lebanon, malaysia, mexico, russia, south_korea, thailand, turkey, vietnam];\n  const countryMap = new Map();\n  countryList.forEach(country => {\n    countryMap.set(country.name, country);\n  });\n\n  // landingpage: [\"landing\", null] mappage: [\"map\", null] countrypage: [\"country\", Country js object] eventpage: [\"event\", null]\n  const [currentPage, setCurrentPage] = React.useState([\"landing\", null]);\n\n  // Render body part according to currentPage state\n  function renderBody() {\n    let componentToRender = null;\n    switch (currentPage[0]) {\n      case \"landing\":\n        componentToRender = /*#__PURE__*/_jsxDEV(LandingPage, {\n          onWorldMapClick: handleWorldMapClick,\n          onRandomCountryClick: handleRandomCountryClick,\n          onRandomDishClick: handleRandomDishClick,\n          randomDish: randomDish\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this);\n        break;\n      case \"map\":\n        componentToRender = /*#__PURE__*/_jsxDEV(MapPage, {\n          onCountryClick: renderCountryPage,\n          countryMap: countryMap\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this);\n        break;\n      case \"country\":\n        componentToRender =\n        /*#__PURE__*/\n        // country object as a prop\n        _jsxDEV(CountryPage, {\n          country: currentPage[1],\n          onWorldMapClick: handleWorldMapClick,\n          onRandomCountryClick: handleRandomCountryClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this);\n        break;\n      case \"event\":\n        componentToRender = /*#__PURE__*/_jsxDEV(EventPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 37\n        }, this);\n        break;\n    }\n    return componentToRender;\n  }\n\n  // Change currentPage to landingPage\n  function handleLogoClick() {\n    console.log(`You jumped to landing page`);\n    setCurrentPage([\"landing\", null]);\n  }\n\n  // Change currentPage to mapPage\n  function handleWorldMapClick() {\n    console.log(`You jumped to world map page`);\n    // switch page logic here\n    setCurrentPage([\"map\", null]);\n  }\n\n  // Draw a random country\n  // Change currentPage to countryPage of the random country\n  function handleRandomCountryClick() {\n    const randomIndex = Math.floor(Math.random() * countryList.length);\n    const selectedCountry = countryList[randomIndex];\n    console.log(`You jumped to ${selectedCountry.countryName}`);\n    // switch page logic here\n    setCurrentPage([\"country\", selectedCountry]);\n  }\n  function handleEventClick() {\n    console.log(`You jumped to event page`);\n    // switch page logic here\n    setCurrentPage([\"event\", null]);\n  }\n  function handleHelpClick() {\n    console.log(`help page pop up`);\n    // floating window logic here\n  }\n\n  function handleAboutClick() {\n    console.log(`about page pop up`);\n    // floating window logic here\n  }\n\n  // Change currentPage to countryPage of the countryName\n  function renderCountryPage(countryName) {\n    if (countryMap.has(countryName)) setCurrentPage([\"country\", countryMap.get(countryName)]);\n    // only for testing, one page for those countries with no content should be createtd later\n    else setCurrentPage([\"event\", null]);\n  }\n\n  // Draw a random dish\n  // Change currentPage to countryPage of the random dish's country\n  const [randomDish, setRandomDish] = React.useState(null);\n  function handleRandomDishClick() {\n    // select a random country first\n    const selectedCountry = countryList[Math.floor(Math.random() * countryList.length)];\n    // select a random dish from the country\n    const selectedDIsh = selectedCountry.traditionalDishes[Math.floor(Math.random() * selectedCountry.traditionalDishes.length)];\n    setRandomDish([selectedCountry, selectedDIsh]);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      onLogoClick: handleLogoClick,\n      onWorldMapClick: handleWorldMapClick,\n      onEventClick: handleEventClick,\n      onHelpClick: handleHelpClick,\n      onAboutClick: handleAboutClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this), renderBody()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"vLbRfx7ExT7qDYHnD9ObQ0eWEfg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Navbar","LandingPage","MapPage","CountryPage","EventPage","china","france","india","italy","japan","lebanon","malaysia","mexico","russia","south_korea","thailand","turkey","vietnam","React","jsxDEV","_jsxDEV","App","_s","countryList","countryMap","Map","forEach","country","set","name","currentPage","setCurrentPage","useState","renderBody","componentToRender","onWorldMapClick","handleWorldMapClick","onRandomCountryClick","handleRandomCountryClick","onRandomDishClick","handleRandomDishClick","randomDish","fileName","_jsxFileName","lineNumber","columnNumber","onCountryClick","renderCountryPage","handleLogoClick","console","log","randomIndex","Math","floor","random","length","selectedCountry","countryName","handleEventClick","handleHelpClick","handleAboutClick","has","get","setRandomDish","selectedDIsh","traditionalDishes","className","children","onLogoClick","onEventClick","onHelpClick","onAboutClick","_c","$RefreshReg$"],"sources":["/Users/hong-gabin/Desktop/DECO3200_A4/DECO3200-A4/group-project/src/App.js"],"sourcesContent":["import Navbar from \"./components/Navbar\";\nimport LandingPage from \"./components/LandingPage\";\nimport MapPage from \"./components/MapPage\";\nimport CountryPage from \"./components/CountryPage\";\nimport EventPage from \"./components/EventPage\";\nimport china from \"./contents/countries/china.json\";\nimport france from \"./contents/countries/france.json\";\nimport india from \"./contents/countries/india.json\";\nimport italy from \"./contents/countries/italy.json\";\nimport japan from \"./contents/countries/japan.json\";\nimport lebanon from \"./contents/countries/lebanon.json\";\nimport malaysia from \"./contents/countries/malaysia.json\";\nimport mexico from \"./contents/countries/mexico.json\";\nimport russia from \"./contents/countries/russia.json\";\nimport south_korea from \"./contents/countries/south_korea.json\";\nimport thailand from \"./contents/countries/thailand.json\";\nimport turkey from \"./contents/countries/turkey.json\";\nimport vietnam from \"./contents/countries/vietnam.json\";\nimport React from \"react\";\n\nfunction App() {\n    const countryList = [\n        china,\n        france,\n        india,\n        italy,\n        japan,\n        lebanon,\n        malaysia,\n        mexico,\n        russia,\n        south_korea,\n        thailand,\n        turkey,\n        vietnam,\n    ];\n\n    const countryMap = new Map();\n\n    countryList.forEach((country) => {\n        countryMap.set(country.name, country);\n    });\n\n    // landingpage: [\"landing\", null] mappage: [\"map\", null] countrypage: [\"country\", Country js object] eventpage: [\"event\", null]\n    const [currentPage, setCurrentPage] = React.useState([\"landing\", null]);\n\n    // Render body part according to currentPage state\n    function renderBody() {\n        let componentToRender = null;\n        switch (currentPage[0]) {\n            case \"landing\":\n                componentToRender = (\n                    <LandingPage\n                        onWorldMapClick={handleWorldMapClick}\n                        onRandomCountryClick={handleRandomCountryClick}\n                        onRandomDishClick={handleRandomDishClick}\n                        randomDish={randomDish}\n                    />\n                );\n                break;\n            case \"map\":\n                componentToRender = (\n                    <MapPage\n                        onCountryClick={renderCountryPage}\n                        countryMap={countryMap}\n                    />\n                );\n                break;\n            case \"country\":\n                componentToRender = (\n                    // country object as a prop\n                    <CountryPage\n                        country={currentPage[1]}\n                        onWorldMapClick={handleWorldMapClick}\n                        onRandomCountryClick={handleRandomCountryClick}\n                    />\n                );\n                break;\n            case \"event\":\n                componentToRender = <EventPage />;\n                break;\n        }\n        return componentToRender;\n    }\n\n    // Change currentPage to landingPage\n    function handleLogoClick() {\n        console.log(`You jumped to landing page`);\n        setCurrentPage([\"landing\", null]);\n    }\n\n    // Change currentPage to mapPage\n    function handleWorldMapClick() {\n        console.log(`You jumped to world map page`);\n        // switch page logic here\n        setCurrentPage([\"map\", null]);\n    }\n\n    // Draw a random country\n    // Change currentPage to countryPage of the random country\n    function handleRandomCountryClick() {\n        const randomIndex = Math.floor(Math.random() * countryList.length);\n        const selectedCountry = countryList[randomIndex];\n        console.log(`You jumped to ${selectedCountry.countryName}`);\n        // switch page logic here\n        setCurrentPage([\"country\", selectedCountry]);\n    }\n\n    function handleEventClick() {\n        console.log(`You jumped to event page`);\n        // switch page logic here\n        setCurrentPage([\"event\", null]);\n    }\n\n    function handleHelpClick() {\n        console.log(`help page pop up`);\n        // floating window logic here\n    }\n\n    function handleAboutClick() {\n        console.log(`about page pop up`);\n        // floating window logic here\n    }\n\n    // Change currentPage to countryPage of the countryName\n    function renderCountryPage(countryName) {\n        if (countryMap.has(countryName))\n            setCurrentPage([\"country\", countryMap.get(countryName)]);\n        // only for testing, one page for those countries with no content should be createtd later\n        else setCurrentPage([\"event\", null]);\n    }\n\n    // Draw a random dish\n    // Change currentPage to countryPage of the random dish's country\n    const [randomDish, setRandomDish] = React.useState(null);\n    function handleRandomDishClick() {\n        // select a random country first\n        const selectedCountry =\n            countryList[Math.floor(Math.random() * countryList.length)];\n        // select a random dish from the country\n        const selectedDIsh =\n            selectedCountry.traditionalDishes[\n                Math.floor(\n                    Math.random() * selectedCountry.traditionalDishes.length\n                )\n            ];\n        setRandomDish([selectedCountry, selectedDIsh]);\n    }\n\n    return (\n        <div className=\"app\">\n            <Navbar\n                onLogoClick={handleLogoClick}\n                onWorldMapClick={handleWorldMapClick}\n                onEventClick={handleEventClick}\n                onHelpClick={handleHelpClick}\n                onAboutClick={handleAboutClick}\n            />\n            {renderBody()}\n        </div>\n    );\n}\n\nexport default App;\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}